plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

repositories {
}

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "org.kabiri.android.usbterminal"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 9
        versionName "0.7.9"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        // read release credentials from keystore.properties file
        def ksProp = new Properties()
        // load keys inside the ksProp file
        loadKeyStore(ksProp)
        release {
            keyAlias ksProp.getProperty("release.keyAlias")
            keyPassword ksProp.getProperty("release.keyPassword")
            storeFile file(ksProp.getProperty("release.file"))
            storePassword ksProp.getProperty("release.storePassword")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }
    namespace 'org.kabiri.android.usbterminal'

}

private void loadKeyStore(Properties ksProp) {
    def ksPropFile = file("keystore.properties")
    if (ksPropFile.exists()) {
        ksProp.load(new FileInputStream(ksPropFile))
    } else {
        println 'ERROR: local keystore file not found'
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Sentry Tracking
    implementation 'io.sentry:sentry-android-core:6.4.1'

    // Dependency Injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Coroutines
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
//    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.0-RC2'

    // hilt testing
    // more info:
    // https://developer.android.com/training/dependency-injection/hilt-testing
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    // unit test libs
    testImplementation 'junit:junit:4.13.2'
    testImplementation "com.google.truth:truth:1.1.3"

    // instrumented test libs
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // Hamcrest for view matching
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    /**
     * This library helps to automate some parts of the USB serial connection.
     * For more information, visit: https://github.com/felHR85/UsbSerial
     */
    implementation 'com.github.felHR85:UsbSerial:6.1.0'
}
